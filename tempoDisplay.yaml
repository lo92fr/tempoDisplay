################################################################################
# Substitution Variables
################################################################################
external_components:
  # makes http_request work with content-length: -1
  - source: github://hlfcode/esphome@main
# - source: github://pr#6953
    components: [ http_request ]
  
substitutions:
  device_name: tempodisplay
  device_wifi_name: tempodisplay
  friendly_name: Tempo Display
  device_ip_address: 192.168.0.128
  device_sampling_time: 5s

################################################################################
# Globals
################################################################################
globals: 
  - id: wifi_connection
    type: bool
    restore_value: no
    initial_value: "false"

  - id: bgcolor
    type: Color
    initial_value: "Color::random_color()"

  - id: token
    type: std::string
    restore_value: no
    initial_value: ""

  - id: today_color
    type: std::string
    restore_value: no
    initial_value: ""

  - id: tomorrow_color
    type: std::string
    restore_value: no
    initial_value: ""

  - id: conso_inst
    type: float
    restore_value: no
    initial_value: "0"

  - id: conso_today_hp
    type: int
    restore_value: no
    initial_value: "0"

  - id: conso_today_hc
    type: int
    restore_value: no
    initial_value: "0"

  - id: conso_tomorrow_hp
    type: int
    restore_value: no
    initial_value: "0"

  - id: conso_tomorrow_hc
    type: int
    restore_value: no
    initial_value: "0"

  - id: facture_today_hp
    type: int
    restore_value: no
    initial_value: "0"

  - id: facture_today_hc
    type: int
    restore_value: no
    initial_value: "0"

  - id: facture_tomorrow_hp
    type: int
    restore_value: no
    initial_value: "0"

  - id: facture_tomorrow_hc
    type: int
    restore_value: no
    initial_value: "0"

  - id: redTotal
    type: int
    restore_value: no
    initial_value: "0"

  - id: redRestant
    type: int
    restore_value: no
    initial_value: "0"

  - id: whiteTotal
    type: int
    restore_value: no
    initial_value: "0"

  - id: whiteRestant
    type: int
    restore_value: no
    initial_value: "0"    

  - id: blueTotal
    type: int
    restore_value: no
    initial_value: "0"

  - id: blueRestant
    type: int
    restore_value: no
    initial_value: "0"    

################################################################################
# Light
################################################################################
light:
  - platform: monochromatic
    output: gpio_backlight_pwm
    name: "Display Backlight"
    id: back_light
    restore_mode: ALWAYS_ON


################################################################################
# Switch
################################################################################
switch:
  - platform: restart
    name: "Restart"
    id: device_restart

  - platform: shutdown
    name: "Shutdown"    
  
  - platform: safe_mode
    name: Use Safe Mode
    id: device_safe_mode

################################################################################
# Board Configuration
################################################################################
esphome:
  name: "${device_name}"
  friendly_name: "${friendly_name}"
  platformio_options:
    upload_speed: 921600
    board_build.flash_mode: dio
    board_build.f_flash: 80000000L
    board_build.f_cpu: 240000000L
  on_boot:
      priority: -100
      then:
      - light.turn_on:
            id: back_light
            brightness: 100% 
      - lvgl.widget.hide: boot_screen

http_request:
    timeout: 10s

logger:
  level: INFO

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  on_connect:
    - lvgl.label.update:
        id: esphome_ip_label
        text:
          format: "IP Address: %s"
          args: [ 'id(ip_address).state.c_str()' ] 
          
    - lvgl.label.update:
        id: esphome_ssid_label
        text:
          format: "SSID: %s"
          args: [ 'id(ssid).state.c_str()' ] 
          
    - lvgl.label.update:
        id: esphome_mac_label
        text:
          format: "MAC Address: %s"
          args: [ 'id(mac_address).state.c_str()' ] 
          
 
web_server:
  port: 80

ota:
  - platform: esphome

api:


esp32:
  board: esp32-s3-devkitc-1
  flash_size: 16MB
  framework:
    type: esp-idf
    version: latest
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: y
      CONFIG_ESP32S3_DATA_CACHE_64KB: y
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: y
      CONFIG_SPIRAM_FETCH_INSTRUCTIONS: y
      CONFIG_SPIRAM_RODATA: y

psram:
  mode: octal
  speed: 80MHz # 120MHz is not supported and falls back to 40MHz

spi:
  - type: quad
    clk_pin: 47
    data_pins: [21, 48, 40, 39]

i2c:
  - sda: 4
    scl: 8

output:
  - id: gpio_backlight_pwm
    platform: ledc
    pin: 1


color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_pink
    red: 100%
    green: 10%
    blue: 40%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: my_gray
    red: 50%
    green: 50%
    blue: 50%
  - id: my_white
    red: 100%
    green: 100%
    blue: 100%
  - id: my_black
    red: 0%
    green: 0%
    blue: 0%


font:
  - file: "gfonts://Roboto"
    id: Roboto_48
    size: 48
  - file: "gfonts://Roboto"
    id: Roboto_36
    size: 36
  - file: "gfonts://Roboto"
    id: Roboto_24
    size: 24
  - file: "gfonts://Roboto"
    id: Roboto_22
    size: 22
  - file: "gfonts://Roboto"
    id: Roboto_20
    size: 20
  - file: "gfonts://Roboto"
    id: Roboto_18
    size: 18
  - file: "gfonts://Roboto"
    id: Roboto_16
    size: 16
  - file: "gfonts://Roboto"
    id: Roboto_14
    size: 14
  - file: "gfonts://Roboto"
    id: Roboto_12
    size: 12
  - file: "gfonts://Roboto"
    id: font_std
    size: 60
    glyphs: "!\"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz/\\[]|&@#'"
  - file: "gfonts://Roboto@700"
    id: font_title
    size: 40
    glyphs: "!\"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz/\\[]|&@#'"

image:
  - file: https://esphome.io/_static/favicon-512x512.png
    id: boot_logo
    resize: 200x200
    type: RGB565
    use_transparency: true
    


display:
  - id: main_display
    platform: qspi_dbi
#    platform: sdl
    dimensions:
      height: 480
      width: 320
    model: CUSTOM
    data_rate: 40MHz
    rotation: 270
    cs_pin:
      number: 45
      ignore_strapping_warning: true
    draw_from_origin: true
    update_interval: 1s
    auto_clear_enabled: false
    


touchscreen:
  - id: main_touchscreen
    platform: axs15231
    transform:
        swap_xy: true
        mirror_x: false
        mirror_y: true
    
################################################################################
# Interval
################################################################################
interval:
  - interval: 10s
    then:
      - if:
          condition:
            wifi.connected:
          then:
            - lambda: |-
                ESP_LOGI("custom", "wifi on");
                id(wifi_connection) = true;

          else:
            - lambda: |-
                ESP_LOGI("custom", "wifi off");
                id(wifi_connection) = false;
      - logger.log: "Interval"
      

time:
  - platform: sntp
    id: esptime
    timezone: Europe/Paris
    servers:
      - 192.168.254.1
    on_time_sync:
        then:
          - lambda: >-
                ESP_LOGI("custom", "ON LOOP!");
          - http_request.post:
                url: !lambda |-
                  ESP_LOGI("custom", "get token");
                  static std::string url = "https://digital.iservices.rte-france.com/token/oauth/";
                  ESP_LOGI("custom", "URL is: %s", url.c_str());
                  return url.c_str();
                capture_response: true
                max_response_buffer_size: 50000
                headers:
                    Authorization: "Basic OTNiODcxYWQtYzMzYy00NjI0LWIwMjEtN2Y5YzVjOWJiYjZkOmIzODQzYTkzLTZlMTQtNDczOS04NjUwLTVlMmU5ODZjODYwZA=="
                    Accept: "application/json"
                    Content-Type: application/x-www-form-urlencoded
                on_response:
                    then:
                        - lambda: |-
                            ESP_LOGI("custom", "Response: %d %d %s", response->status_code,body.length(), body.c_str());
                            json::parse_json(body, [](JsonObject root) -> bool {
                                String val = root["access_token"];
                                ESP_LOGI("custom", "token: %s", val.c_str());
                                id(token) = std::string(val);
                                return true;
                            });
                          
          - http_request.get:
                url: !lambda |-
                  static ESPTime now = id(esptime).now();
                  static ESPTime tomorrow = id(esptime).now();
                  
                  ESP_LOGI("custom", "esp time");
                  
                  tomorrow.increment_day();

                  uint16_t year = now.year;
                  if (now.month>=1 && now.month<=8) {
                    year = now.year-1;
                  }
                  
                  static std::string start = "";
                  start = start + esphome::to_string (year);
                  start = start + "-08-31T00:00:00+01:00";

                  
                  
                  static ESPTime end = id(esptime).now();
                  end.increment_day();
                  end.increment_day();
                  
                  static std::string url = "https://digital.iservices.rte-france.com/open_api/tempo_like_supply_contract/v1/tempo_like_calendars?start_date=" + start + "&end_date=" + end.strftime("%Y-%m-%dT00:00:00+01:00") + "&fallback_status=true";
                  
                  ESP_LOGI("custom", "URL is: %s", url.c_str());
                  return url.c_str();
                capture_response: true
                max_response_buffer_size: 50000
                headers:
                    Authorization: !lambda |-
                        static std::string bearer = "Bearer ";
                        bearer = bearer + " " + id(token);
                        return bearer.c_str();
                    Accept: "application/json"
                on_response:
                    then:
                        - lambda: |-
                            ESP_LOGI("custom", "Response: %d %d %s", response->status_code,body.length(), body.c_str());
                            json::parse_json(body, [](JsonObject root) -> bool {
                            
                                static ESPTime now = id(esptime).now();
                                static ESPTime tomorrow = id(esptime).now();
                                tomorrow.increment_day();
                                
                                JsonObject calendar = root["tempo_like_calendars"];
                                JsonArray values= calendar["values"];
                                
                                
                                static std::string todayDt = now.strftime("%Y-%m-%dT00:00:00+01:00");
                                static std::string tomorrowDt = tomorrow.strftime("%Y-%m-%dT00:00:00+01:00");
                                int nbjourRestantRed = 0;
                                int nbjourRestantWhite = 0;
                                int nbjourRestantBlue = 0;
                                
                                for (JsonObject elem : values) {
                                    String str = elem["start_date"];
                                    String val = elem["value"];
                                    ESP_LOGI("custom", "Response: %s", str.c_str());
                                    if (strcmp(str.c_str(),tomorrowDt.c_str())==0) {
                                        ESP_LOGI("custom", "Tomorrow");
                                        id(tomorrow_color) = std::string(val);
                                    }
                                    if (strcmp(str.c_str(),todayDt.c_str())==0) {
                                        ESP_LOGI("custom", "Today");
                                        id(today_color) = std::string(val);
                                    }
                                    
                                    if (strcmp(val.c_str(), "BLUE")==0) {
                                        nbjourRestantBlue++;
                                    }
                                    else if (strcmp(val.c_str(), "WHITE")==0) {
                                        nbjourRestantWhite++;
                                    }
                                    else if (strcmp(val.c_str(), "RED")==0) {
                                        nbjourRestantRed++;
                                    }
                                }       
                                int nbjourTotalRed = 22;
                                int nbjourTotalWhite = 43;
                                int nbjourTotalBlue = 300;
                                
                                id(redTotal) = nbjourTotalRed;
                                id(redRestant) = nbjourRestantRed;
                                id(whiteTotal) = nbjourTotalWhite;
                                id(whiteRestant) = nbjourRestantWhite;
                                id(blueTotal) = nbjourTotalBlue;
                                id(blueRestant) = nbjourRestantBlue;

                                ESP_LOGI("custom", "ColorRed: %d %d", nbjourTotalRed, nbjourRestantRed);
                                ESP_LOGI("custom", "ColorWhite: %d %d", nbjourTotalWhite, nbjourRestantWhite);
                                ESP_LOGI("custom", "ColorBlue: %d %d", nbjourTotalBlue, nbjourRestantBlue);

                                return true;
                            });
    on_time:
      - seconds: /5
        then: 
          - http_request.get:
                url: !lambda |-
                    static std::string url = "http://emoncms.clae.net/feed/value.json?id=258&apikey=16a80b4fd5c8422d73508519cca5562e";
                    ESP_LOGI("custom", "URL is: %s", url.c_str());
                    return url.c_str();
                capture_response: true
                max_response_buffer_size: 50000
                on_response:
                    then:
                        - lambda: |-
                            ESP_LOGI("custom", "Response2: %d %d %s", response->status_code,body.length(), body.c_str());
                            float consoInst = atoll(body.c_str());
                            id(conso_inst) = consoInst;
                            
          - http_request.get:
                url: !lambda |-
                    //static ESPTime start = ESPTime::from_epoch_utc(.timestamp - 86400*365);
                    
                    ESPTime now = id(esptime).now();
                    now.hour=6;
                    now.minute=0;
                    now.second=0;
                    //now.recalc_timestamp_local();
                    now.recalc_timestamp_utc();
                    long tsStart = now.timestamp;

                    now.increment_day();
                    now.recalc_timestamp_utc();
                    //now.recalc_timestamp_local();
                    long tsEnd = now.timestamp;
                    ESP_LOGI("custom", "ts now is : %d %d", tsStart, tsEnd);
                    
                    static std::string startSt = esphome::to_string(tsStart);
                    static std::string endSt = esphome::to_string(tsEnd);
                    
                    static std::string url = "https://emoncms.clae.net/feed/data.json?id=182&start=" + startSt + "&end=" + endSt + "&interval=7200&average=0&timeformat=unix&skipmissing=0&limitinterval=0&delta=1&apikey=16a80b4fd5c8422d73508519cca5562e";
                    ESP_LOGI("custom", "URL is: %s", url.c_str());
                    return url.c_str();
                capture_response: true
                max_response_buffer_size: 50000
                on_response:
                    then:
                        - lambda: |-
                            ESP_LOGI("custom", "Response2: %d %d %s", response->status_code,body.length(), body.c_str());
                            
                            DynamicJsonDocument doc(50000);
                            deserializeJson(doc, body.c_str());
                            JsonArray arr = doc.as<JsonArray>();
                            ESP_LOGI("custom", "Response3b:%d", arr.size());
                            
                            int totalHp = 0;
                            int totalHc = 0;
                            for (int idx=0;idx<arr.size();idx++) {
                                JsonArray elm = arr[idx].as<JsonArray>();                         
                                int val = elm[1].as<int>();
                                if (idx<8)
                                    totalHp += val;
                                else
                                    totalHc += val;
                            }

                            
                            ESP_LOGI("custom", "Response3c:%d", totalHp);
                            ESP_LOGI("custom", "Response3d:%d", totalHc);
                            
                            float tarif_hp =  0;
                            float tarif_hc =  0;
                            
                            if (strcmp(id(today_color).c_str(), "RED")==0) {
                                tarif_hp = 0.6586;
                                tarif_hc = 0.1518;
                            }
                            else if (strcmp(id(today_color).c_str(), "BLUE")==0) {
                                tarif_hp = 0.1552;
                                tarif_hc = 0.1287;
                            }
                            else if (strcmp(id(today_color).c_str(), "WHITE")==0) {
                                tarif_hp = 0.1792;
                                tarif_hc = 0.1447;
                            }
                      
                    
                            id(conso_today_hp) = totalHp/1000.00;
                            id(conso_today_hc) = totalHc/1000.00;
                            id(facture_today_hp) = (totalHp/1000.00)*tarif_hp;
                            id(facture_today_hc) = (totalHc/1000.00)*tarif_hc;

                            id(conso_tomorrow_hp) = 0;
                            id(conso_tomorrow_hc) = 0;
                            id(facture_tomorrow_hp) = 0;
                            id(facture_tomorrow_hc) = 0;  

                            
      - seconds: "*"
        then:
          - lambda: >-
                ESP_LOGV("main", "ON time!");
          - logger.log: "Time update"
          - lvgl.label.update:
              id: clock_time
              text:
                format: "%s"
                args: [ 'id(current_time).state.c_str()' ] 
                
                
          - lvgl.button.update:
              id: today_color_button_hp
              bg_color: !lambda |-
                if (strcmp(id(today_color).c_str(), "RED")==0)
                    return lv_color_make(192,0,0);
                else if (strcmp(id(today_color).c_str(), "BLUE")==0)
                    return lv_color_make(70,114,196);
                else if (strcmp(id(today_color).c_str(), "WHITE")==0)
                    return lv_color_make(165,165,165);
                return lv_color_make(40,40,40);   

          - lvgl.button.update:
              id: today_color_button_hc
              bg_color: !lambda |-
                if (strcmp(id(today_color).c_str(), "RED")==0)
                    return lv_color_make(255,0,0);
                else if (strcmp(id(today_color).c_str(), "BLUE")==0)
                    return lv_color_make(91,155,213);
                else if (strcmp(id(today_color).c_str(), "WHITE")==0)
                    return lv_color_make(216,216,216);
                return lv_color_make(40,40,40);   

          - lvgl.button.update:
              id: tomorrow_color_button_hp
              bg_color: !lambda |-
                if (strcmp(id(tomorrow_color).c_str(), "RED")==0)
                    return lv_color_make(192,0,0);
                else if (strcmp(id(tomorrow_color).c_str(), "BLUE")==0)
                    return lv_color_make(70,114,196);
                else if (strcmp(id(tomorrow_color).c_str(), "WHITE")==0)
                    return lv_color_make(165,165,165);
                return lv_color_make(40,40,40);   

          - lvgl.button.update:
              id: tomorrow_color_button_hc
              bg_color: !lambda |-
                if (strcmp(id(tomorrow_color).c_str(), "RED")==0)
                    return lv_color_make(255,0,0);
                else if (strcmp(id(tomorrow_color).c_str(), "BLUE")==0)
                    return lv_color_make(91,155,213);
                else if (strcmp(id(tomorrow_color).c_str(), "WHITE")==0)
                    return lv_color_make(216,216,216);
                return lv_color_make(40,40,40);     
                
          - lvgl.label.update:
              id: label_red_jour
              text:
                format: "%d / %d" 
                args: 
                  - 'id(redTotal)'
                  - 'id(redRestant)'
                
          - lvgl.label.update:
              id: conso_instant
              text:
                format: "%.0f W"
                args: 
                  - 'id(conso_inst)'
          
          - lvgl.label.update:
              id: label_conso_today_hp
              text:
                format: "%d KWh"
                args: 
                  - 'id(conso_today_hp)'          

          - lvgl.label.update:
              id: label_conso_today_hc
              text:
                format: "%d KWh"
                args: 
                  - 'id(conso_today_hc)'          

          - lvgl.label.update:
              id: label_conso_tomorrow_hp
              text:
                format: "%d KWh"
                args: 
                  - 'id(conso_tomorrow_hp)'          
          

          - lvgl.label.update:
              id: label_conso_tomorrow_hc
              text:
                format: "%d KWh"
                args: 
                  - 'id(conso_tomorrow_hc)'          

          - lvgl.label.update:
              id: label_facture_today_hp
              text:
                format: "%d €"
                args: 
                  - 'id(facture_today_hp)'          

          - lvgl.label.update:
              id: label_facture_today_hc
              text:
                format: "%d €"
                args: 
                  - 'id(facture_today_hc)'          

          - lvgl.label.update:
              id: label_facture_tomorrow_hp
              text:
                format: "%d €"
                args: 
                  - 'id(facture_tomorrow_hp)'          
          

          - lvgl.label.update:
              id: label_facture_tomorrow_hc
              text:
                format: "%d €"
                args: 
                  - 'id(facture_tomorrow_hc)'          
                    
          - lvgl.label.update:
              id: label_white_jour
              text:
                format: "%d / %d" 
                args:
                  - 'id(whiteTotal)'
                  - 'id(whiteRestant)'

          - lvgl.label.update:
              id: label_blue_jour
              text:
                format: "%d / %d" 
                args:
                  - 'id(blueTotal)'
                  - 'id(blueRestant)'

          - lvgl.label.update:
              id: label_price_today_hp
              text: !lambda |-
                   if (strcmp(id(today_color).c_str(), "RED")==0)
                      return "0,6586 €";
                   else if (strcmp(id(today_color).c_str(), "BLUE")==0)
                      return "0,1552 €";
                   else if (strcmp(id(today_color).c_str(), "WHITE")==0)
                      return "0,1792 €";
                   else
                      return "NA €";

          - lvgl.label.update:
              id: label_price_tomorrow_hp
              text: !lambda |-
                   if (strcmp(id(tomorrow_color).c_str(), "RED")==0)
                      return "0,6586 €";
                   else if (strcmp(id(tomorrow_color).c_str(), "BLUE")==0)
                      return "0,1552 €";
                   else if (strcmp(id(tomorrow_color).c_str(), "WHITE")==0)
                      return "0,1792 €";
                   else
                      return "NA €";
                      
          - lvgl.label.update:
              id: label_price_today_hc
              text: !lambda |-
                   if (strcmp(id(today_color).c_str(), "RED")==0)
                      return "0,1518 €";
                   else if (strcmp(id(today_color).c_str(), "BLUE")==0)
                      return "0,1287 €";
                   else if (strcmp(id(today_color).c_str(), "WHITE")==0)
                      return "0,1447 €";
                   else
                      return "NA €";

          - lvgl.label.update:
              id: label_price_tomorrow_hc
              text: !lambda |-
                   if (strcmp(id(tomorrow_color).c_str(), "RED")==0)
                      return "0,1518 €";
                   else if (strcmp(id(tomorrow_color).c_str(), "BLUE")==0)
                      return "0,1287 €";
                   else if (strcmp(id(tomorrow_color).c_str(), "WHITE")==0)
                      return "0,1447 €";
                   else
                      return "NA €";                      
 
################################################################################
# Sensors
################################################################################
sensor:
  - platform: homeassistant
    id: light_brightness
    entity_id: light.your_dimmer
    attribute: brightness

  # WiFi
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    id: ${device_name}_wifi_signal_sensor
    update_interval: ${device_sampling_time}

  # Uptime
  - platform: uptime
    name: "Uptime Sensor"
    id: ${device_name}_uptime_sensor
    update_interval: ${device_sampling_time}
    internal: true
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: ${device_name}_uptime_human
            state: !lambda |-
              int seconds = round(id(${device_name}_uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();
################################################################################
# Text Sensors
################################################################################
text_sensor:
  - platform: wifi_info
    ip_address:
      id: ip_address
      name: "IP Address"
      entity_category: diagnostic
    ssid:
      id: ssid
      name: "Connected SSID"
      entity_category: diagnostic
    mac_address:
      id: mac_address
      name: "Mac Address"
      entity_category: diagnostic


  - platform: version
    id: esphome_version
    name: "ESPHome Version"
    hide_timestamp: true
    on_value:
      then:
        - lvgl.label.update:
            id: esphome_version_label
            text: !lambda |-
              return ("ESPHome Version: " + id(esphome_version).state).c_str();

  - platform: template
    name: "Current Time"
    id: current_time
    update_interval: 1s
    lambda: return  id(esptime).now().strftime("%H:%M:%S");

  #-------------------------------------------------------------------------------
  # Custom Text sensors
  #-------------------------------------------------------------------------------
  - platform: template
    name: Uptime Human Readable
    id: ${device_name}_uptime_human
    icon: mdi:clock-start

    

lvgl:
  bg_color: my_black
  displays:
    - main_display
  touchscreens:
    - main_touchscreen
  style_definitions:
    - id: date_style
      align: center
      text_color: 0x000000
      bg_opa: cover
      radius: 4
      pad_all: 2

  widgets: 
    - tabview:
        id: mainTabView
        position: top
        bg_color: my_black
        size: 15%
        tab_style:
          border_color: 0xcccccc
          border_width: 1
          items:
            text_color: 0x0000FF
        tabs:
          - name: Tarif
            id: tabview_tab_1
            widgets:
                - label:
                    id: label_1
                    text_font: Roboto_20
                    text_color: my_red
                    text: Aujourd'hui
                    x: 60
                    y: 5
                - label:
                    id: label_2
                    text_font: Roboto_20
                    text_color: my_red
                    text: Demain
                    x: 280
                    y: 5
                - label:
                    id: label_3
                    text_font: Roboto_16
                    text_color: my_blue
                    text: 6 Heures
                    x: 10
                    y: 50
                - label:
                    id: label_4
                    text_font: Roboto_16
                    text_color: my_blue
                    text: 22 Heures
                    x: 115
                    y: 50                    
                - label:
                    id: label_5
                    text_font: Roboto_16
                    text_color: my_blue
                    text: 6 Heures
                    x: 220
                    y: 50
                - label:
                    id: label_6
                    text_font: Roboto_16
                    text_color: my_blue
                    text: 22 Heures
                    x: 325
                    y: 50    
                - line:
                    points:
                      - 5, 5
                      - 5, 70
                    line_width: 2
                    line_color: 0x0000FF
                    line_rounded: false                    
                    line_dash_gap: 2
                    line_dash_width: 6
                - line:
                    points:
                      - 110, 30
                      - 110, 70
                    line_width: 2
                    line_color: 0x0000FF
                    line_rounded: false                    
                    line_dash_gap: 2
                    line_dash_width: 6
                - line:
                    points:
                      - 215, 5
                      - 215, 70
                    line_width: 2
                    line_color: 0x0000FF
                    line_rounded: false                    
                    line_dash_gap: 2
                    line_dash_width: 6
                - line:
                    points:
                      - 320, 30
                      - 320, 70
                    line_width: 2
                    line_color: 0x0000FF
                    line_rounded: false                    
                    line_dash_gap: 2
                    line_dash_width: 6
                - line:
                    points:
                      - 430, 5
                      - 430, 70
                    line_width: 2
                    line_color: 0x0000FF
                    line_rounded: false                    
                    line_dash_gap: 2
                    line_dash_width: 6
                - button:
                    x: 10
                    y: 80
                    width: 100
                    height: 30
                    id: today_color_button_hp
                    radius: 0
                    widgets:
                      - label:
                          align: center
                          id: today_color_label_hp
                          text: HP
                          bg_color: !lambda |-
                            return lv_color_make(249,251,178);
                - button:
                    x: 115
                    y: 80
                    width: 100
                    height: 30
                    radius: 0
                    id: today_color_button_hc
                    widgets:
                      - label:
                          align: center
                          id: today_color_label_hc
                          text: HC
                          bg_color: !lambda |-
                            return lv_color_make(249,251,178);
                - button:
                    x: 220
                    y: 80
                    width: 100
                    height: 30
                    radius: 0
                    id: tomorrow_color_button_hp
                    widgets:
                      - label:
                          align: center
                          id: tomorrow_color_label_hp
                          text: HP
                          bg_color: !lambda |-
                            return lv_color_make(249,251,178);
                - button:
                    x: 325
                    y: 80
                    width: 100
                    height: 30
                    radius: 0
                    id: tomorrow_color_button_hc
                    widgets:
                      - label:
                          align: center
                          id: tomorrow_color_label_hc
                          text: HC
                          bg_color: !lambda |-
                            return lv_color_make(249,251,178);
                - line:
                    points:
                      - 430, 80
                      - 460, 95
                      - 430, 110
                      - 430, 80
                    line_width: 1
                    line_color: 0x0000FF
                    line_rounded: false                    
                - label:
                    id: label_header_price
                    text_font: Roboto_16
                    text_color: my_white
                    text: T
                    x: 5
                    y: 140
                - label:
                    id: label_price_today_hp
                    text_font: Roboto_16
                    text_color: my_white
                    x: 35
                    y: 140
                - label:
                    id: label_price_tomorrow_hp
                    text_font: Roboto_16
                    text_color: my_white
                    x: 245
                    y: 140
                - label:
                    id: label_price_today_hc
                    text_font: Roboto_16
                    text_color: my_white
                    x: 140
                    y: 140
                - label:
                    id: label_price_tomorrow_hc
                    text_font: Roboto_16
                    text_color: my_white
                    x: 345
                    y: 140                    
                - label:
                    id: label_header_conso
                    text_font: Roboto_16
                    text_color: my_white
                    text: C
                    x: 5
                    y: 165
                - label:
                    id: label_conso_today_hp
                    text_font: Roboto_16
                    text_color: my_white
                    x: 35
                    y: 165
                - label:
                    id: label_conso_tomorrow_hp
                    text_font: Roboto_16
                    text_color: my_white
                    x: 245
                    y: 165
                - label:
                    id: label_conso_today_hc
                    text_font: Roboto_16
                    text_color: my_white
                    x: 140
                    y: 165
                - label:
                    id: label_conso_tomorrow_hc
                    text_font: Roboto_16
                    text_color: my_white
                    x: 345
                    y: 165                    
                - label:
                    id: label_header_facture
                    text_font: Roboto_16
                    text_color: my_white
                    text: F
                    x: 5
                    y: 190
                - label:
                    id: label_facture_today_hp
                    text_font: Roboto_16
                    text_color: my_white
                    x: 35
                    y: 190
                - label:
                    id: label_facture_tomorrow_hp
                    text_font: Roboto_16
                    text_color: my_white
                    x: 245
                    y: 190
                - label:
                    id: label_facture_today_hc
                    text_font: Roboto_16
                    text_color: my_white
                    x: 140
                    y: 190
                - label:
                    id: label_facture_tomorrow_hc
                    text_font: Roboto_16
                    text_color: my_white
                    x: 345
                    y: 190                    
          - name: Conso
            id: tabview_tab_2
            widgets:
                - label:
                    id: conso_instant_lb
                    text_font: Roboto_16
                    text_color: my_white
                    text: Conso Instant
                    x: 10
                    y: 10
                - label:
                    id: conso_instant
                    text_font: Roboto_16
                    text_color: my_white
                    x: 130
                    y: 10
          - name: Calendrier
            id: tabview_tab_3
            widgets:
                - label:
                    id: label_red
                    text_font: Roboto_16
                    text_color: my_red
                    text: Rouge
                    x: 300
                    y: 150
                - label:
                    id: label_red_jour
                    text_font: Roboto_16
                    text_color: my_white
                    x: 370
                    y: 150
                - label:
                    id: label_blue
                    text_font: Roboto_16
                    text_color: my_blue
                    text: Bleue
                    x: 300
                    y: 175
                - label:
                    id: label_blue_jour
                    text_font: Roboto_16
                    text_color: my_white
                    x: 370
                    y: 175
                - label:
                    id: label_white
                    text_font: Roboto_16
                    text_color: my_white
                    text: Blanc
                    x: 300
                    y: 200
                - label:
                    id: label_white_jour
                    text_font: Roboto_16
                    text_color: my_white
                    x: 370
                    y: 200

          - name: Time
            id: tabview_tab_4
            widgets:
            - label:
                id: clock_time
                text_font: font_std
                text_color: my_red
                align: CENTER
                text:
                        format: ":%s"
                        args: [ 'id(current_time).state.c_str()' ]           
                
                on_press:
                  - lvgl.widget.show: boot_screen

    - obj:
        id: boot_screen
        x: 0
        y: 0
        width: 100%
        height: 100%
        bg_color: 0xffffff
        bg_opa: COVER
        radius: 0
        pad_all: 0
        border_width: 0
        widgets:
          - image:
              src: boot_logo
          - spinner:
              align: CENTER
              y: 95
              height: 50
              width: 50
              spin_time: 1s
              arc_length: 60deg
              arc_width: 8
              indicator:
                arc_color: 0x18bcf2
                arc_width: 8
          - label:
              id: esphome_mac_label
              x: 200
              y: 50  
              text:
                format: "MAC Address: %s"
                args: [ 'id(mac_address).state.c_str()' ]                
          - label:
              id: esphome_ip_label
              x: 200
              y: 65  
              text:
                format: "IP Address: %s"
                args: [ 'id(ip_address).state.c_str()' ]                
          - label:
              id: esphome_ssid_label
              x: 200 
              y: 80
              text:
                format: "SSID: %s"
                args: [ 'id(ssid).state.c_str()' ]                                
          - label:
              x: 200
              y: 110  
              id: esphome_version_label           
              text:
                format: "ESPHome Version: %s"
                args: [ 'id(esphome_version).state.c_str()' ]
        on_press:
          - lvgl.widget.hide: boot_screen